{"version":3,"sources":["src/utils/clamp.ts","src/utils/index.ts","src/animate.ts","src/easing/make-power.ts","src/easing/linear.ts","src/easing/ease-out.ts","src/easing/index.ts","src/index.ts"],"names":[],"mappings":";AAOA,aAAA,SAAgB,EAAM,EAAa,EAAe,GAC3C,IAAA,EAAU,EAAM,EAAM,EAAM,EAC5B,EAAU,EAAM,EAAM,EAAM,EAE3B,OAAA,KAAK,IAAI,EAAS,KAAK,IAAI,EAAS,IAJ5C,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,MAAA;;ACPA,aAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,QAAA,eAAA,KAAA,QAAA,GAAA,EAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,EAAA,QAAA;;ACQa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IARb,IAAA,EAAA,QAAA,WAQa,QAAA,QAAU,SAAC,GAAE,IAAA,EAAA,EAAA,SAAU,EAAA,EAAA,OAAQ,EAAA,EAAA,SACrC,EAAY,YAAY,MAEvB,OAAA,IAAI,QAAQ,SAAC,IACP,SAAN,IACL,OAAA,sBAAsB,SAAA,GACf,IAAA,EAAe,EAAA,MAAM,EAAG,GAAI,EAAO,GAAa,GAChD,EAAW,EAAS,GAE1B,EAAO,GAEH,EAAe,EAClB,IAEA,MAIH;;ACvBW,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAY,SAAC,GAAkB,OAAA,SAAC,GAA2B,OAAA,KAAA,IAAA,EAAkB;;ACA7E,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAS,SAAC,GACf,OAAA;;ACDK,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAU,SAAC,GAAuC,OAAA,SAAC,GAAyB,OAAA,EAAI,EAAS,EAAI;;ACG7F,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IANb,IAAA,EAAA,QAAA,gBACA,EAAA,QAAA,YACA,EAAA,QAAA,cAEM,EAAQ,EAAA,UAAU,GAEX,QAAA,OAAS,CACrB,OAAQ,EAAA,OAAO,GACf,UAAW,EAAA,QAAQ,GACnB,QAAS,EAAA,QAAQ;;AC+CjB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAxDD,IAAA,EAAA,QAAA,aACA,EAAA,QAAA,YAmBA,SAAgB,EAAgB,EAAsB,GAAE,IAAA,EAAA,EAAA,OAAQ,EAAA,EAAA,SAAA,OAAA,IAAA,EAAA,IAAA,EAAgB,EAAA,EAAA,UAAA,OAAA,IAAA,EAAA,SAAA,EAIzE,EAAY,SAAC,EAAe,EAAoB,GAgCtD,IAAA,EA9BQ,OAAA,GAAS,GADgB,OAAb,EAAG,EAAO,IAAG,EAAI,IACK,GAiBnC,OAAA,EAAA,QAAQ,CACd,SAAU,EAAA,OAAO,GACjB,SAAQ,EACR,OAAQ,SAAC,IAdS,SAAC,GACb,IAAA,EAAM,EAAU,EAAQ,UAAW,MAAO,GAC1C,EAAO,EAAU,EAAQ,WAAY,OAAQ,GAEnD,EAAQ,UAAY,EACpB,EAAQ,WAAa,EAUpB,CAAW,MA3Bd,QAAA,gBAAA,EAgCA,IAAM,EAAkC,oBAAX,OAEzB,IACF,OAAe,gBAAkB","file":"src.583f7312.js","sourceRoot":"..","sourcesContent":["/**\n * Clamping value into min and max\n *\n * @param {number}  min\n * @param {number} value\n * @param {number} max\n */\nexport function clamp(min: number, value: number, max: number): number {\n\tconst realMin = min < max ? min : max;\n\tconst realMax = min < max ? max : min;\n\n\treturn Math.max(realMin, Math.min(realMax, value));\n}\n","export * from './clamp';\n","import { clamp } from './utils';\n\ntype Params = {\n\ttimingFn: (value: number) => number;\n\tdrawFn: (value: number) => void;\n\tduration: number;\n};\n\nexport const animate = ({ timingFn, drawFn, duration }: Params) => {\n\tconst timeBegin = performance.now();\n\n\treturn new Promise((resolve: () => void) => {\n\t\tconst raf = () =>\n\t\t\trequestAnimationFrame(time => {\n\t\t\t\tconst timeFraction = clamp(0, 1, (time - timeBegin) / duration);\n\t\t\t\tconst progress = timingFn(timeFraction);\n\n\t\t\t\tdrawFn(progress);\n\n\t\t\t\tif (timeFraction < 1) {\n\t\t\t\t\traf();\n\t\t\t\t} else {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\n\t\traf();\n\t});\n};\n","/**\n *\tEasing - Power\n */\nexport const makePower = (power: number) => (timingFraction: number) => timingFraction ** power;\n","/**\n *\tEasing - linear\n */\nexport const linear = (t: (timingFunc: number) => number) => {\n\treturn t;\n};\n","/**\n *\tEasing - EaseOut\n */\nexport const easeOut = (timingFn: (arg0: number) => number) => (timeFraction: number) => 1 - timingFn(1 - timeFraction);\n","import { makePower } from './make-power';\nimport { linear } from './linear';\nimport { easeOut } from './ease-out';\n\nconst power = makePower(2);\n\nexport const easing = {\n\tlinear: linear(power),\n\teaseInOut: easeOut(power),\n\teaseOut: easeOut(power),\n};\n\nexport type Easing = typeof easing;\n","import { animate } from './animate';\nimport { Easing, easing } from './easing';\n\ntype Options = {\n\tduration?: number;\n\toffset: {\n\t\ttop?: number;\n\t\tleft?: number;\n\t};\n\tanimation?: keyof Easing;\n};\n\n/**\n * @param {element} element HTML element\n * @param {Object} options\n * @example\n *\n * awesomeScrollTo(document.documentElement, { offset: { left: 0, top: 300 } })\n */\n\nexport function awesomeScrollTo(element: HTMLElement, { offset, duration = 600, animation = 'linear' }: Options) {\n\t/**\n\t * Calculate value for top | left\n\t */\n\tconst calculate = (value: number, to: 'top' | 'left', progress: number) => {\n\t\tconst offsetForCalc = offset[to] ?? 0;\n\t\treturn value - (value - offsetForCalc) * progress;\n\t};\n\n\t/**\n\t * Draw function\n\t */\n\tconst scrollDraw = (progress: number) => {\n\t\tconst top = calculate(element.scrollTop, 'top', progress);\n\t\tconst left = calculate(element.scrollLeft, 'left', progress);\n\n\t\telement.scrollTop = top;\n\t\telement.scrollLeft = left;\n\t};\n\n\t/**\n\t * Call Animate util\n\t */\n\treturn animate({\n\t\ttimingFn: easing[animation],\n\t\tduration,\n\t\tdrawFn: (progress: number) => {\n\t\t\tscrollDraw(progress);\n\t\t},\n\t});\n}\n\nconst WINDOW_EXISTS = typeof window !== 'undefined';\n\nif (WINDOW_EXISTS) {\n\t(window as any).awesomeScrollTo = awesomeScrollTo;\n}\n"]}